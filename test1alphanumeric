#include <iostream>
#include <pthread.h>
#include <vector>
#include <cctype>

using namespace std;

// Global variables
string inputPhrase;
vector<string> words;
pthread_t alphaThread, numericThread;
size_t currentIndex = 0;
pthread_mutex_t mutex = PTHREAD_MUTEX_INITIALIZER; // Mutex to ensure proper synchronization

// Thread function to print words starting with an alphabet
void* alpha(void* arg) {
    string threadName = "alpha";
    while (true) {
        pthread_mutex_lock(&mutex);
        if (currentIndex < words.size()) {
            if (isalpha(words[currentIndex][0])) {
                cout << threadName << ": " << words[currentIndex] << endl;
                currentIndex++;
            }
        } else {
            pthread_mutex_unlock(&mutex);
            break;
        }
        pthread_mutex_unlock(&mutex);
    }
    pthread_exit(NULL);
}

// Thread function to print words starting with a number
void* numeric(void* arg) {
    string threadName = "numeric";
    while (true) {
        pthread_mutex_lock(&mutex);
        if (currentIndex < words.size()) {
            if (isdigit(words[currentIndex][0])) {
                cout << threadName << ": " << words[currentIndex] << endl;
                currentIndex++;
            }
        } else {
            pthread_mutex_unlock(&mutex);
            break;
        }
        pthread_mutex_unlock(&mutex);
    }
    pthread_exit(NULL);
}

int main(int argc, char* argv[]) {
    // Read the input phrase
    if (argc == 2) {
        inputPhrase = argv[1];
    } else {
        cout << "Enter string: ";
        getline(cin, inputPhrase);
    }

    // Split the input phrase into words
    size_t start = 0, end = 0;
    while ((end = inputPhrase.find(' ', start)) != string::npos) {
        words.push_back(inputPhrase.substr(start, end - start));
        start = end + 1;
    }
    words.push_back(inputPhrase.substr(start));

    // Create threads
    pthread_create(&alphaThread, NULL, alpha, NULL);
    pthread_create(&numericThread, NULL, numeric, NULL);

    // Wait for threads to finish
    pthread_join(alphaThread, NULL);
    pthread_join(numericThread, NULL);

    // Destroy the mutex
    pthread_mutex_destroy(&mutex);

    return 0;
}
